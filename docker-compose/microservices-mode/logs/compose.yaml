version: '3.9'

# ============================================================================ #
#                  Microservices Mode - Logs
# ============================================================================ #

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
# docs: https://docs.docker.com/compose/multiple-compose-files/include/#include-and-overrides
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/memcached.yaml
  - path:
      - ../../common/compose-include/mimir.yaml
      - ./mimirtool.override.yaml
  - path:
      - ../../common/compose-include/grafana.yaml
      - ./grafana.override.yaml
  - path:
      - ../../common/compose-include/grafana-agent.yaml
      - ./grafana-agent.override.yaml

# https://github.com/qclaogui/codelab-monitoring/blob/main/docker-compose/common/config/agent-flow/modules/docker/README.md
x-labels: &loki-labels
  logs.agent.grafana.com/log-format: json

services:
  gateway:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/docker-compose/common/config/agent-flow/modules/docker/README.md
    labels:
      metrics.agent.grafana.com/scrape: false
      logs.agent.grafana.com/log-format: nginx
    depends_on: { distributor: { condition: service_healthy } }
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:1.25-alpine}
    volumes:
      - ../../common/config/nginx/10-default-lgtmp.envsh:/docker-entrypoint.d/10-default-lgtmp.envsh
      - ../../common/config/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ../../common/config/loki/gateway_loki.conf:/etc/nginx/templates/gateway_loki.conf.template
      - ../../common/config/mimir/gateway_mimir.conf:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - LOKI_DISTRIBUTOR_HOST=distributor
      - LOKI_INGESTER_HOST=ingester
      - LOKI_RULER_HOST=ruler
      - LOKI_QUERY_FRONTEND_HOST=query-frontend
      - LOKI_QUERIER_HOST=querier
      - LOKI_COMPACTOR_HOST=compactor
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ || exit 1" ]
      interval: 5s
      timeout: 2s
      retries: 10
    ports:
      - "33100:3100"

  distributor:
    labels: *loki-labels
    depends_on: { ingester: { condition: service_healthy } }
    image: &lokiImage ${LOKI_IMAGE:-docker.io/grafana/loki:2.9.6}
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=distributor
      - -config.expand-env=true
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 5s
      timeout: 2s
      retries: 10
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - loki-memberlist

  ingester:
    labels: *loki-labels
    depends_on: { minio: { condition: service_healthy } }
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=ingester
      - -config.expand-env=true
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - loki-memberlist

  query-frontend:
    labels: *loki-labels
    depends_on: { query-scheduler: { condition: service_healthy } }
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=query-frontend
      - -config.expand-env=true

  query-scheduler:
    labels: *loki-labels
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=query-scheduler
      - -config.expand-env=true
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - loki-memberlist

  querier:
    labels: *loki-labels
    depends_on: { query-scheduler: { condition: service_healthy } }
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=querier
      - -config.expand-env=true

  ruler:
    labels: *loki-labels
    depends_on: { minio: { condition: service_healthy } }
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=ruler
      - -config.expand-env=true
    networks:
      default:
        aliases:
          - loki-memberlist

  compactor:
    labels: *loki-labels
    image: *lokiImage
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/microservices-mode-logs.yaml
      - -target=compactor
      - -config.expand-env=true
    networks:
      default:
        aliases:
          - loki-memberlist
