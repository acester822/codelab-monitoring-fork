version: '3.9'

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/agent-collect-metrics.yaml
  - path: ../../common/compose-include/load-mimir-rule.yaml

# Microservices mode (Metrics)
services:
  gateway:
    depends_on:
      distributor:
        condition: service_healthy
      ruler:
        condition: service_healthy
    image: nginxinc/nginx-unprivileged:1.25-alpine
    volumes:
      - ../../common/config/nginx:/etc/nginx/templates
      - ../../common/config/mimir/gateway_mimir.conf.template:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - DISTRIBUTOR_HOST=distributor
      - ALERT_MANAGER_HOST=alertmanager
      - RULER_HOST=ruler
      - QUERY_FRONTEND_HOST=query-frontend
      - COMPACTOR_HOST=compactor
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080"

  distributor:
    depends_on:
      ingester:
        condition: service_started
    image: &mimirImage grafana/mimir:2.10.3
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=distributor
#      - -log.level=warn
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  overrides-exporter:
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=overrides-exporter

  querier:
    depends_on:
      query-scheduler:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=querier
      - -log.level=error
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  query-frontend:
    depends_on:
      query-scheduler:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=query-frontend
      - -log.level=error

  query-scheduler:
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=query-scheduler
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 2

  ruler:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=ruler
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      default:
        aliases:
          - mimir-memberlist

  alertmanager:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=alertmanager
    networks:
      default:
        aliases:
          - mimir-memberlist

  compactor:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=compactor
    networks:
      default:
        aliases:
          - mimir-memberlist

  ingester:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=ingester
    ports:
      - "8080"
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - mimir-memberlist

  store-gateway:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=store-gateway
    networks:
      default:
        aliases:
          - mimir-memberlist

  grafana:
    image: grafana/grafana:10.2.2
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ../../common/config/mimir/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml    # load datasources
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin # load dashboards
    environment:
      - GF_LOG_LEVEL=error
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
    ports:
      - "3000:3000"
