version: '3.9'

# ============================================================================ #
#                  Read-Write Mode - Metrics
# ============================================================================ #

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/memcached.yaml
  - path: ../../common/compose-include/load-rules-to-mimir.yaml

services:
  grafana-agent:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/docker-compose/common/config/agent-flow/modules/docker/README.md
    labels:
      logs.agent.grafana.com/log-format: logfmt
    depends_on:
      gateway:
        condition: service_healthy
    image: ${AGENT_IMAGE:-docker.io/grafana/agent:latest}
    volumes:
      - ../../common/config/agent-flow:/etc/agent-config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    entrypoint:
      - /bin/grafana-agent
      - run
      - /etc/agent-config/metrics.river
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --cluster.join-addresses=grafana-agent-cluster:12345
      - --disable-reporting=true
    environment:
      - AGENT_MODE=flow
      - AGENT_CONFIG_FOLDER=/etc/agent-config
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:12345/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "12345:12345"
    networks:
      default:
        aliases:
          - grafana-agent-cluster

  gateway:
    labels:
      - metrics.agent.grafana.com/scrape=false
    depends_on:
      mimir-write:
        condition: service_healthy
      mimir-backend:
        condition: service_healthy
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:latest}
    volumes:
      - ../../common/config/nginx/10-default-lgtmp.envsh:/docker-entrypoint.d/10-default-lgtmp.envsh
      - ../../common/config/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ../../common/config/mimir/gateway_mimir.conf:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - MIMIR_DISTRIBUTOR_HOST=mimir-write
      - MIMIR_QUERY_FRONTEND_HOST=mimir-read
      - MIMIR_ALERT_MANAGER_HOST=mimir-backend
      - MIMIR_RULER_HOST=mimir-backend
      - MIMIR_COMPACTOR_HOST=mimir-backend
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "38080:8080"

  mimir-backend:
    depends_on:
      minio:
        condition: service_healthy
    image: &mimirImage ${MIMIR_IMAGE:-docker.io/grafana/mimir:latest}
    volumes:
      - ../../common/config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir/read-write-mode-metrics.yaml
      - -target=backend
      - -config.expand-env=true
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 2

  mimir-read:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir/read-write-mode-metrics.yaml
      - -target=read
      - -config.expand-env=true
    deploy:
      replicas: 2


  mimir-write:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir/read-write-mode-metrics.yaml
      - -target=write
      - -config.expand-env=true
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - mimir-memberlist

  grafana:
    image: ${GRAFANA_IMAGE:-docker.io/grafana/grafana:latest}
    hostname: grafana
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ../../common/config/mimir/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin
      - ../../../monitoring-mixins/agent-flow-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/agent-flow-mixin
      - ../../../monitoring-mixins/go-runtime-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/go-runtime-mixin
      - ../../../monitoring-mixins/memcached-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/memcached-mixin
    environment:
      - GF_LOG_LEVEL=warn
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
    ports:
      - "3000:3000"
