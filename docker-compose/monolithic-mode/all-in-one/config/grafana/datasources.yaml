apiVersion: 1

deleteDatasources:
- name: Metrics
  uid: metrics
- name: Logs
  uid: logs
- name: Traces
  uid: traces
- name: Profiles
  uid: profiles

datasources:
# Mimir for metrics
- name: Metrics
  type: prometheus
  uid: metrics
  access: proxy
  orgId: 1
  url: http://mimir:8080/prometheus
  basicAuth: false
  isDefault: false
  version: 1
  editable: true
  jsonData:
    prometheusType: Mimir
    exemplarTraceIdDestinations:
      - name: traceID
        datasourceUid: traces


# Loki for logs
- name: Logs
  type: loki
  access: proxy
  orgId: 1
  uid: logs
  url: http://loki:3100
  basicAuth: false
  isDefault: false
  version: 1
  editable: true
  jsonData:
    derivedFields:
      - datasourceUid: traces
        matcherRegex: "[tT]race_?[iI][dD]\"?[:=]\"?(\\w+)"
        name: traceID
        url: $${__value.raw}

# https://grafana.com/docs/grafana/latest/datasources/tempo/configure-tempo-data-source/#provision-the-data-source
# Tempo for traces
- name: Traces
  type: tempo
  access: proxy
  orgId: 1
  uid: traces
  url: http://tempo:3200
  basicAuth: false
  isDefault: false
  version: 1
  editable: true
  apiVersion: 1
  jsonData:
    search:
      hide: false
    lokiSearch:
      datasourceUid: logs
    nodeGraph:
      enabled: true
    serviceMap:
      datasourceUid: metrics
    traceQuery:
      timeShiftEnabled: true
      spanStartTimeShift: '-1h'
      spanEndTimeShift: '1h'
    spanBar:
      type: 'Tag'
      tag: 'http.path'
    tracesToMetrics:
      datasourceUid: metrics
      spanStartTimeShift: '-1h'
      spanEndTimeShift: '1h'
      tags: [{ key: 'service.name', value: 'service' }, { key: 'span_name' }, { key: 'http_method' }]
      queries:
      - name: '(R) Rate'
        query: 'sum(rate(traces_spanmetrics_calls_total{$$__tags}[$$__rate_interval]))'
      - name: '(E) Error Rate'
        query: 'sum(rate(traces_spanmetrics_calls_total{$$__tags, status_code="STATUS_CODE_ERROR"}[$$__rate_interval]))'
      - name: '(D) Duration'
        query: 'histogram_quantile(0.9, sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[$$__rate_interval])) by (le))'
    tracesToLogsV2:
      datasourceUid: logs
      spanStartTimeShift: '-1h'
      spanEndTimeShift: '1h'
      tags: [{ key: 'service.name', value: 'service_name' }, { key: 'namespace' }, { key: 'cluster' }]
      filterByTraceID: false
      filterBySpanID: false
    tracesToProfiles:
      customQuery: false
      datasourceUid: "profiles"
      profileTypeId: "process_cpu:cpu:nanoseconds:cpu:nanoseconds"
      tags: [{ key: 'service.name', value: 'service_name' }]


# Pyroscope for profiles
- name: Profiles
  type: grafana-pyroscope-datasource
  access: proxy
  orgId: 1
  uid: profiles
  url: http://pyroscope:4040
  basicAuth: false
  isDefault: false
  version: 1
  editable: true
