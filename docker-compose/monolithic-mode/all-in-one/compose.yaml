version: '3.9'

# ============================================================================ #
#                  Monolithic Mode - All in one
# ============================================================================ #

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/memcached.yaml
  - path: ../../common/compose-include/load-rules-to-mimir.yaml
  - path: ../../common/compose-include/inbucket.yaml

# https://github.com/qclaogui/codelab-monitoring/blob/main/docker-compose/common/config/agent-flow/modules/docker/README.md
x-labels: &profiles-labels
  profiles.agent.grafana.com/cpu.scrape: true
  profiles.agent.grafana.com/memory.scrape: true
  profiles.agent.grafana.com/goroutine.scrape: true

x-environment: &jaeger-environment
  JAEGER_AGENT_HOST: grafana-agent
  JAEGER_AGENT_PORT: 6831
  JAEGER_SAMPLER_TYPE: const
  JAEGER_SAMPLER_PARAM: 1

services:
  grafana-agent:
    labels:
      logs.agent.grafana.com/log-format: logfmt
    depends_on:
      gateway:
        condition: service_healthy
    image: ${AGENT_IMAGE:-docker.io/grafana/agent:v0.40.3}
    volumes:
      - ../../common/config/agent-flow:/etc/agent-config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    entrypoint:
      - /bin/grafana-agent
      - run
      - /etc/agent-config/monolithic-mode-all.river
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --disable-reporting=true
    environment:
      - AGENT_MODE=flow
      - AGENT_CONFIG_FOLDER=/etc/agent-config
    # expose 12345 port so we can directly access grafana-agent inside container
    ports:
      - "12345:12345"

  gateway:
    labels:
      metrics.agent.grafana.com/scrape: false
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      pyroscope:
        condition: service_healthy
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:1.25-alpine}
    restart: always
    volumes:
      - ../../common/config/nginx/10-default-lgtmp.envsh:/docker-entrypoint.d/10-default-lgtmp.envsh
      - ../../common/config/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ../../common/config/loki/gateway_loki.conf:/etc/nginx/templates/gateway_loki.conf.template
      - ../../common/config/tempo/gateway_tempo.conf:/etc/nginx/templates/gateway_tempo.conf.template
      - ../../common/config/mimir/gateway_mimir.conf:/etc/nginx/templates/gateway_mimir.conf.template
      - ../../common/config/pyroscope/gateway_pyroscope.conf:/etc/nginx/templates/gateway_pyroscope.conf.template
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  loki:
    labels:
      <<: *profiles-labels
      profiles.agent.grafana.com/service_name: loki
      logs.agent.grafana.com/log-format: json
    depends_on:
      minio:
        condition: service_healthy
    image: ${LOKI_IMAGE:-docker.io/grafana/loki:2.9.6}
    volumes:
      - ../../common/config/loki:/etc/loki
    command:
      - -config.file=/etc/loki/monolithic-mode-logs.yaml
      - -target=all
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=loki
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # expose 33100 port so we can directly access loki inside container
    ports:
      - "33100:3100"
    networks:
      default:
        aliases:
          - loki-memberlist

  tempo:
    labels:
      <<: *profiles-labels
      profiles.agent.grafana.com/service_name: tempo
      logs.agent.grafana.com/log-format: logfmt
    depends_on:
      minio:
        condition: service_healthy
      mimir:
        condition: service_healthy
    image: ${TEMPO_IMAGE:-docker.io/grafana/tempo:2.4.1}
    volumes:
      - ../../common/config/tempo:/etc/tempo
    command:
      - -config.file=/etc/tempo/monolithic-mode-traces.yaml
      - -target=all
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=tempo
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    # expose 33200 port so we can directly access tempo inside container
    ports:
      - "33200:3200"

  mimir:
    labels:
      <<: *profiles-labels
      profiles.agent.grafana.com/service_name: mimir
      logs.agent.grafana.com/log-format: logfmt
    depends_on:
      minio:
        condition: service_healthy
    image: ${MIMIR_IMAGE:-docker.io/grafana/mimir:2.11.0}
    volumes:
      - ../../common/config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir/monolithic-mode-metrics.yaml
      - -target=all
      - -config.expand-env=true
      - -ruler.max-rules-per-rule-group=50
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=mimir
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # expose 38080 port so we can directly access mimir inside container
    ports:
      - "38080:8080"
    networks:
      default:
        aliases:
          - mimir-memberlist

  pyroscope:
    labels:
      - logs.agent.grafana.com/log-format=logfmt
    depends_on:
      minio:
        condition: service_healthy
    image: ${PYROSCOPE_IMAGE:-docker.io/grafana/pyroscope:1.5.0}
    container_name: pyroscope
    volumes:
      - ../../common/config/pyroscope/monolithic-mode-profiles.yaml:/etc/config.yaml
    command:
      - -config.file=/etc/config.yaml
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=pyroscope
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:4040/ready || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5
    # expose 34040 port so we can directly access pyroscope inside container
    ports:
      - "34040:4040"

  grafana:
    labels:
      <<: *profiles-labels
      profiles.agent.grafana.com/service_name: grafana
      profiles.agent.grafana.com/port: 6060
      logs.agent.grafana.com/log-format: logfmt
    image: ${GRAFANA_IMAGE:-docker.io/grafana/grafana:10.4.1}
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ../../../monitoring-mixins/agent-flow-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/agent-flow-mixin
      - ../../../monitoring-mixins/go-runtime-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/go-runtime-mixin
      - ../../../monitoring-mixins/loki-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/loki-mixin
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin
      - ../../../monitoring-mixins/pyroscope-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/pyroscope-mixin
      - ../../../monitoring-mixins/memcached-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/memcached-mixin
      # - ../../../monitoring-mixins/tempo-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/tempo-mixin
    environment:
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-warn}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor tracesEmbeddedFlameGraph traceqlSearch correlations metricsSummary traceToMetrics traceToProfiles
      GF_DIAGNOSTICS_PROFILING_ENABLED: true
      GF_DIAGNOSTICS_PROFILING_ADDR: 0.0.0.0
      GF_DIAGNOSTICS_PROFILING_PORT: 6060
    ports:
      - "3000:3000"

