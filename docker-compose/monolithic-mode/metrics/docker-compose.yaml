version: '3.9'

# ============================================================================ #
#                  Monolithic Mode - Metrics
# ============================================================================ #

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/agent-collect-metrics.yaml
  - path: ../../common/compose-include/load-mimir-rule.yaml

services:
  gateway:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/docker-compose/common/config/agent-flow/modules/docker/README.md
    labels:
      - metrics.agent.grafana.com/scrape=false
    depends_on:
      mimir:
        condition: service_healthy
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:latest}
    volumes:
      - ../../common/config/nginx:/etc/nginx/templates
      - ../../common/config/mimir/gateway_mimir.conf.template:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      # nginx envsubst does not support default values like Docker Compose do when using ${MY_VAR:-My Default}.
      # so need a full setup of all variables.
      # https://github.com/nginxinc/docker-nginx/issues/592
      # https://stackoverflow.com/a/65529290
      - MIMIR_DISTRIBUTOR_HOST=mimir
      - MIMIR_ALERT_MANAGER_HOST=mimir
      - MIMIR_RULER_HOST=mimir
      - MIMIR_QUERY_FRONTEND_HOST=mimir
      - MIMIR_COMPACTOR_HOST=mimir
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "38080:8080"

  mimir:
    depends_on:
      minio:
        condition: service_healthy
    image: ${MIMIR_IMAGE:-docker.io/grafana/mimir:latest}
    command:
      - -config.file=/etc/mimir.yaml
      - -target=all
      - -config.expand-env=true
    volumes:
      - ../../common/config/mimir/monolithic-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use monolithic-mode.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/mimir/latest/references/architecture/deployment-modes/#monolithic-mode
    deploy:
      replicas: 1
    networks:
      default:
        aliases:
          - mimir-memberlist

  grafana:
    image: ${GRAFANA_IMAGE:-docker.io/grafana/grafana:latest}
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ../../common/config/mimir/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin
      - ../../../monitoring-mixins/agent-flow-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/agent-flow-mixin
      - ../../../monitoring-mixins/go-runtime-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/go-runtime-mixin
    environment:
      - GF_LOG_LEVEL=warn
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
    ports:
      - "3000:3000"
