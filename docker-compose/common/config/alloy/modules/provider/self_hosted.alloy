/************************************************
* Component: self_hosted
* Description: Self Hosteded Receiver Provider
*************************************************/

declare "self_hosted" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "metrics_endpoint" {
		comment  = "Where to send collected metrics."
		optional = true
		default  = coalesce(env("SELF_HOSTED_METRICS_ENDPOINT"), "http://mimir:8080")
	}

	argument "logs_endpoint" {
		comment  = "Where to send collected logs."
		optional = true
		default  = coalesce(env("SELF_HOSTED_LOGS_ENDPOINT"), "http://loki:3100")
	}

	argument "traces_endpoint" {
		comment  = "Where to send collected traces."
		optional = true
		default  = coalesce(env("SELF_HOSTED_TRACES_ENDPOINT"), "http://tempo:4318")
	}

	argument "profiles_endpoint" {
		comment  = "Where to send collected profiles."
		optional = true
		default  = coalesce(env("SELF_HOSTED_PROFILES_ENDPOINT"), "http://pyroscope:4040")
	}

	/********************************************
	* Setup Receivers
	********************************************/
	prometheus.remote_write "self_hosted" {
		endpoint {
			url                    = argument.metrics_endpoint.value + "/api/v1/push"
			send_native_histograms = true

			basic_auth {
				password_file = coalesce(env("SELF_HOSTED_METRICS_BASIC_AUTH_PASSWORD_FILE"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD_FILE"))
				password      = coalesce(env("SELF_HOSTED_METRICS_BASIC_AUTH_PASSWORD"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD"))
				username      = coalesce(env("SELF_HOSTED_METRICS_BASIC_AUTH_USERNAME"), env("SELF_HOSTED_BASIC_AUTH_USERNAME"))
			}
		}
	}

	loki.write "self_hosted" {
		endpoint {
			url = argument.logs_endpoint.value + "/loki/api/v1/push"

			basic_auth {
				password_file = coalesce(env("SELF_HOSTED_LOGS_BASIC_AUTH_PASSWORD_FILE"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD_FILE"))
				password      = coalesce(env("SELF_HOSTED_LOGS_BASIC_AUTH_PASSWORD"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD"))
				username      = coalesce(env("SELF_HOSTED_LOGS_BASIC_AUTH_USERNAME"), env("SELF_HOSTED_BASIC_AUTH_USERNAME"))
			}
		}
	}

	otelcol.auth.basic "self_hosted" {
		username = coalesce(env("SELF_HOSTED_TRACES_BASIC_AUTH_USERNAME"), env("SELF_HOSTED_BASIC_AUTH_USERNAME"))
		password = coalesce(env("SELF_HOSTED_TRACES_BASIC_AUTH_PASSWORD"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD"))
	}

	otelcol.exporter.otlphttp "self_hosted" {
		client {
			endpoint = argument.traces_endpoint.value
			auth     = otelcol.auth.basic.self_hosted.handler

			tls {
				insecure             = true
				insecure_skip_verify = true
			}
		}
	}

	pyroscope.write "self_hosted" {
		endpoint {
			url = argument.profiles_endpoint.value

			basic_auth {
				password_file = coalesce(env("SELF_HOSTED_PROFILES_BASIC_AUTH_PASSWORD_FILE"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD_FILE"))
				password      = coalesce(env("SELF_HOSTED_PROFILES_BASIC_AUTH_PASSWORD"), env("SELF_HOSTED_BASIC_AUTH_PASSWORD"))
				username      = coalesce(env("SELF_HOSTED_PROFILES_BASIC_AUTH_USERNAME"), env("SELF_HOSTED_BASIC_AUTH_USERNAME"))
			}
		}
	}

	/********************************************
	* EXPORTS
	********************************************/
	export "metrics_receiver" {
		value = prometheus.remote_write.self_hosted.receiver
	}

	export "logs_receiver" {
		value = loki.write.self_hosted.receiver
	}

	export "traces_receiver" {
		value = otelcol.exporter.otlphttp.self_hosted.input
	}

	export "profiles_receiver" {
		value = pyroscope.write.self_hosted.receiver
	}
}
