/*
Module(profiles_auto_scrape): Docker Containers Auto-Scraping
Description: Scrapes targets for profiles based on Docker Containers labels

Note: Every argument except for "forward_to" is optional, and does have a defined default value.  However, the values for these
      arguments are not defined using the default = " ... " argument syntax, but rather using the coalesce(argument.value, " ... ").
      This is because if the argument passed in from another consuming module is set to null, the default = " ... " syntax will
      does not override the value passed in, where coalesce() will return the first non-null value.


The full list of profile types supported by labels is "cpu", "memory", "goroutine", "block", "mutex" and "fgprof"

For example the following labels:

  ```
  profiles.grafana.com/<profile-type>.scrape: true
  profiles.grafana.com/<profile-type>.path: /path/to
  profiles.grafana.com/service_name: pyroscope
  profiles.grafana.com/tenant: primary
  profiles.grafana.com/scheme: http
  profiles.grafana.com/port: 8080
  profiles.grafana.com/interval: 30s
  profiles.grafana.com/timeout: 15s
  ```
*/

declare "label_auto_scrape" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "forward_to" {
		comment = "Must be a list(ProfilessReceiver) where collected profile should be forwarded to"
	}

	argument "label_prefix" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		// i.e. profiles.grafana.com, then again for prometheus.io
		comment  = "The label_prefix to use Auto-Scraping (default: profiles.grafana.com)"
		default  = "profiles.grafana.com"
		optional = true
	}

	argument "__sd_label" {
		optional = true
		comment  = "The logic is used to transform the label_prefix argument into a valid label name by removing unsupported characters."
		default  = replace(replace(replace(coalesce(argument.label_prefix.value, "profiles.grafana.com"), ".", "_"), "/", "_"), "-", "_")
	}

	argument "cluster" {
		optional = true
	}

	argument "namespace" {
		optional = true
	}

	argument "tenant" {
		comment  = "The tenant to write profile to.  This does not have to be the tenantId, this is the value to look for in the logs.grafana.com/tenant label, and this can be a regex. (default: (.*))"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape profile from the targets (default: 30s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 15s)"
		optional = true
	}

	// get the available containers.
	discovery.docker "dd_profiles" {
		host             = "unix:///var/run/docker.sock"
		refresh_interval = "15s"

		filter {
			name   = "status"
			values = ["running"]
		}
	}

	discovery.relabel "dr_docker_profiles" {
		targets = discovery.docker.dd_profiles.targets

		// allow resources to declare the protocol to use when collecting profiles
		// default value is "http"
		rule {
			action       = "replace"
			replacement  = "http"
			target_label = "__scheme__"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_scheme",
			]
			separator    = ";"
			regex        = "^(?:;*)?(https?).*$"
			replacement  = "$1"
			target_label = "__scheme__"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_port",
			]
			separator    = ";"
			regex        = "^(?:;*)?(\\d+).*$"
			replacement  = "$1"
			target_label = "__tmp_port"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__address__",
				"__tmp_port",
			]
			separator    = ";"
			regex        = "^([^:]+)(?::\\d+)?;(\\d+)$"
			replacement  = "$1:$2"
			target_label = "__address__"
		}

		// allow resources to declare their profiles should be sent to
		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_tenant",
			]
			regex = "^(" + coalesce(argument.tenant.value, ".*") + ")$"
		}

		// allow resources to declare how often their profiles should be collected.
		// default value is 30s, the following duration formats are supported (s|m|ms|h|d)
		rule {
			action       = "replace"
			replacement  = coalesce(argument.scrape_interval.value, "30s")
			target_label = "__scrape_interval__"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_interval",
			]
			separator    = ";"
			regex        = "^(?:;*)?(\\d+(s|m|ms|h|d)).*$"
			replacement  = "$1"
			target_label = "__scrape_interval__"
		}

		// allow resources to declare the timeout of the scrape request
		// default value is 15s, the following duration formats are supported (s|m|ms|h|d)
		rule {
			action       = "replace"
			replacement  = coalesce(argument.scrape_timeout.value, "15s")
			target_label = "__scrape_timeout__"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_interval",
			]
			separator    = ";"
			regex        = "^(?:;*)?(\\d+(s|m|ms|h|d)).*$"
			replacement  = "$1"
			target_label = "__scrape_timeout__"
		}

		/********************************************
		* Handle Setting Common Labels
		********************************************/

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.cluster.value, "docker-compose")
			target_label = "cluster"
		}

		// set the namespace label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.namespace.value, "monitoring-system")
			target_label = "namespace"
		}

		// set a default job label to be the namespace/docker_compose_service
		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = coalesce(argument.namespace.value, "monitoring-system") + "/$1"
			target_label = "job"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "pod"
		}

		rule {
			source_labels = ["__meta_docker_container_name"]
			regex         = "/(.*)"
			target_label  = "container"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_app",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "service_name"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_service_name",
				"__meta_docker_container_label_pyroscope_io_service_name",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "service_name"
		}
	}

	/********************************************
	* Pyroscope Scrape CPU
	********************************************/
	discovery.relabel "dr_keep_cpu_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_cpu_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_cpu_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_cpu" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-cpu"
		targets  = discovery.relabel.dr_keep_cpu_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = true
			}

			profile.memory {
				enabled = false
			}

			profile.goroutine {
				enabled = false
			}

			profile.block {
				enabled = false
			}

			profile.mutex {
				enabled = false
			}

			profile.fgprof {
				enabled = false
			}
		}
	}

	/********************************************
	* Pyroscope Scrape Memory
	********************************************/
	discovery.relabel "dr_keep_memory_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_memory_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_memory_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_memory" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-memory"
		targets  = discovery.relabel.dr_keep_memory_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = false
			}

			profile.memory {
				enabled = true
			}

			profile.goroutine {
				enabled = false
			}

			profile.block {
				enabled = false
			}

			profile.mutex {
				enabled = false
			}

			profile.fgprof {
				enabled = false
			}
		}
	}

	/********************************************
	* Pyroscope Scrape Goroutine
	********************************************/
	discovery.relabel "dr_keep_goroutine_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_goroutine_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_goroutine_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_goroutine" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-goroutine"
		targets  = discovery.relabel.dr_keep_goroutine_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = false
			}

			profile.memory {
				enabled = false
			}

			profile.goroutine {
				enabled = true
			}

			profile.block {
				enabled = false
			}

			profile.mutex {
				enabled = false
			}

			profile.fgprof {
				enabled = false
			}
		}
	}

	/********************************************
	* Pyroscope Scrape Block
	********************************************/
	discovery.relabel "dr_keep_block_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_block_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_block_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_block" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-block"
		targets  = discovery.relabel.dr_keep_block_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = false
			}

			profile.memory {
				enabled = false
			}

			profile.goroutine {
				enabled = false
			}

			profile.block {
				enabled = true
			}

			profile.mutex {
				enabled = false
			}

			profile.fgprof {
				enabled = false
			}
		}
	}

	/********************************************
	* Pyroscope Scrape Mutex
	********************************************/
	discovery.relabel "dr_keep_mutex_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_mutex_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_mutex_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_mutex" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-mutex"
		targets  = discovery.relabel.dr_keep_mutex_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = false
			}

			profile.memory {
				enabled = false
			}

			profile.goroutine {
				enabled = false
			}

			profile.block {
				enabled = false
			}

			profile.mutex {
				enabled = true
			}

			profile.fgprof {
				enabled = false
			}
		}
	}

	/********************************************
	* Pyroscope Scrape Fgprof
	********************************************/
	discovery.relabel "dr_keep_fgprof_targets" {
		targets = discovery.relabel.dr_docker_profiles.output

		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_fgprof_scrape",
			]
			regex = "^(?:;*)?(true).*$"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_fgprof_path",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "__profile_path__"
		}
	}

	pyroscope.scrape "ps_profile_fgprof" {
		forward_to = argument.forward_to.value

		job_name = "label-profiles-fgprof"
		targets  = discovery.relabel.dr_keep_fgprof_targets.output

		clustering {
			enabled = true
		}

		profiling_config {
			profile.process_cpu {
				enabled = false
			}

			profile.memory {
				enabled = false
			}

			profile.goroutine {
				enabled = false
			}

			profile.block {
				enabled = false
			}

			profile.mutex {
				enabled = false
			}

			profile.fgprof {
				enabled = true
			}
		}
	}
}
