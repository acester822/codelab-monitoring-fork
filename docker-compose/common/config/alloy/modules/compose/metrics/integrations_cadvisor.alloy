/************************************************
* Component: integrations_cadvisor
*************************************************/

declare "integrations_cadvisor" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "cluster" {
		optional = true
	}

	argument "namespace" {
		optional = true
	}

	argument "keep_metrics" {
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	/********************************************
	* Integrations cAdvisor
	********************************************/
	prometheus.exporter.cadvisor "integrations_cadvisor" {
		docker_host = "unix:///var/run/docker.sock"

		store_container_labels = false
		// store_container_labels must be set to false for this to take effect.
		// https://github.com/google/cadvisor/blob/master/docs/runtime_options.md#cadvisor-runtime-options
		allowlisted_container_labels = [
			"com.docker.compose.project",
			"com.docker.compose.service",
			"metrics.grafana.com/job",
			"prometheus.io/job",
		]

		docker_only     = true
		enabled_metrics = ["cpu", "diskIO", "memory", "network"]
	}

	/********************************************
	* Discovery Relabelings (pre-scrape)
	********************************************/
	discovery.relabel "integrations_cadvisor" {
		targets = prometheus.exporter.cadvisor.integrations_cadvisor.targets

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.cluster.value, "docker-compose")
			target_label = "cluster"
		}

		// set the namespace label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.namespace.value, "monitoring-system")
			target_label = "namespace"
		}
	}

	/********************************************
	* Prometheus Scrape Integrations Targets
	********************************************/
	prometheus.scrape "integrations_cadvisor" {
		targets = concat(
			discovery.relabel.integrations_cadvisor.output,
		)

		enable_protobuf_negotiation = true
		scrape_classic_histograms   = true

		scrape_interval = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
	}

	/********************************************
	* Prometheus Metric Relabelings (post-scrape)
	********************************************/
	prometheus.relabel "integrations_cadvisor" {
		forward_to = argument.forward_to.value

		// drop unused metric label
		rule {
			action = "labeldrop"
			regex  = "id"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}

		// set a default job label to be the namespace/service_name
		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = coalesce(argument.namespace.value, "monitoring-system") + "/$1"
			target_label = "job"
		}

		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "pod"
		}

		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "container"
		}

		// allow resources to declare their the job label value to use when collecting their metrics, the default value is "",
		rule {
			action        = "replace"
			source_labels = [
				"container_label_metrics_agent_grafana_com_job",
				"container_label_prometheus_io_job",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "job"
		}
	}
}
