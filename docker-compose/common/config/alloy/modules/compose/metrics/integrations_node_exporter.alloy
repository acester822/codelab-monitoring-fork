/************************************************
* Component: integrations_node_exporter
*************************************************/

declare "integrations_node_exporter" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "cluster" {
		optional = true
	}

	argument "namespace" {
		optional = true
	}

	argument "keep_metrics" {
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	/********************************************
	* Integrations Node Exporter
	********************************************/
	prometheus.exporter.unix "integrations_node_exporter" { }

	/********************************************
	* Discovery Relabelings (pre-scrape)
	********************************************/
	discovery.relabel "integrations_node_exporter" {
		targets = prometheus.exporter.unix.integrations_node_exporter.targets

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.cluster.value, "docker-compose")
			target_label = "cluster"
		}

		// set the namespace label
		rule {
			action       = "replace"
			replacement  = coalesce(argument.namespace.value, "monitoring-system")
			target_label = "namespace"
		}

		rule {
			target_label = "instance"
			replacement  = constants.hostname
		}

		rule {
			target_label = "job"
			replacement  = "integrations/node-exporter"
		}
	}

	/********************************************
	* Prometheus Scrape Integrations Targets
	********************************************/
	prometheus.scrape "integrations_node_exporter" {
		targets = concat(
			discovery.relabel.integrations_node_exporter.output,
		)

		enable_protobuf_negotiation = true
		scrape_classic_histograms   = true

		scrape_interval = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_node_exporter.receiver]
	}

	/********************************************
	* Prometheus Metric Relabelings (post-scrape)
	********************************************/
	prometheus.relabel "integrations_node_exporter" {
		forward_to = argument.forward_to.value

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(up|node_exporter_build_info|node_time_seconds|node_boot_time_seconds|node_load.*|node_cpu.*|node_memory.*|node_disk.*|node_filesystem.*|process_cpu_seconds_total|process_resident_memory_bytes)")
			action        = "keep"
		}

		// Drop metrics for certain file systems
		rule {
			source_labels = ["__name__", "fstype"]
			separator     = "@"
			regex         = "node_filesystem.*@(tempfs)"
			action        = "drop"
		}
	}
}
