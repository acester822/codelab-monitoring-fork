/*
Module: log-relabelings
Description: Handles log relabelings
*/
argument "targets" {
	// comment = "Discovered targets to apply relabelings to"
	optional = false
}

argument "tenant" {
	// comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
	optional = true
	default  = "^(primary|anonymous|)$"
}

export "relabelings" {
	value = discovery.relabel.logs
}

// apply common relabelings
module.file "relabelings_common" {
	filename = env("AGENT_CONFIG_FOLDER") + "/modules/docker/relabelings/common.river"

	arguments {
		targets = argument.targets.value
	}
}

// apply container log specific relabelings
discovery.relabel "logs" {
	targets = module.file.relabelings_common.exports.relabelings.output

	// allow services to declare their logs to be ingested or not, the following annotation is supported:
	//   logs.agent.grafana.com/scrape: false
	rule {
		action        = "replace"
		source_labels = ["__meta_docker_container_label_logs_agent_grafana_com_scrape"]
		separator     = ";"
		regex         = "^(?:;*)?(true|false).*$"
		replacement   = "$1"
		target_label  = "__tmp_scrape"
	}

	// drop any targets that have scrape: false
	rule {
		action        = "drop"
		source_labels = ["__tmp_scrape"]
		regex         = "false"
	}

	// allow containers to declare what tenant their logs should be written to, the following annotation is supported:
	//   logs.agent.grafana.com/tenant: "primary"
	rule {
		action        = "keep"
		source_labels = ["__meta_docker_container_label_logs_agent_grafana_com_tenant"]
		regex         = "^(" + argument.tenant.value + ")$"
	}

	// make all labels on the pod available to the pipeline as labels,
	// they are omitted before write via labelallow unless explicitly set
	rule {
		action = "labelmap"
		regex  = "__meta_docker_container_label_(.+)"
	}
}
