/********************************************
 * ARGUMENTS
 ********************************************/
argument "cluster" {
	optional = true
	default  = "docker-compose"
}

argument "namespace" {
	optional = true
	default  = "monitoring-system"
}

argument "tenant" {
	optional = true
	default  = "anonymous"
}

argument "metrics_endpoint" {
	optional = true
	default  = "http://mimir:8080"
	//comment = "Where to send collected metrics."
}

argument "logs_endpoint" {
	optional = true
	default  = "http://loki:3100"
	//comment = "Where to send collected logs."
}

argument "traces_endpoint" {
	optional = true
	default  = "tempo:4317"
	//comment = "Where to send collected traces."
}

argument "profiles_endpoint" {
	optional = true
	default  = "http://pyroscope:4040"
	//comment  = "Where to send collected profiles."
}

/********************************************
 * EXPORTS
 ********************************************/

export "relabelings_common" {
	value = discovery.relabel.common
}

export "metrics_receiver" {
	value = prometheus.remote_write.docker_compose.receiver
}

export "logs_receiver" {
	value = loki.write.docker_compose.receiver
}

export "traces_receiver" {
	value = otelcol.exporter.otlp.docker_compose.input
}

export "profiles_receiver" {
	value = pyroscope.write.docker_compose.receiver
}

/********************************************
 * Endpoints
 ********************************************/

// Metrics
prometheus.remote_write "docker_compose" {
	endpoint {
		url                    = argument.metrics_endpoint.value + "/api/v1/push"
		send_native_histograms = true
	}

	external_labels = {
		"scraped_by" = "grafana-agent",
		"cluster"    = argument.cluster.value,
		"namespace"  = argument.namespace.value,
	}
}

// Logs
loki.write "docker_compose" {
	endpoint {
		url       = argument.logs_endpoint.value + "/loki/api/v1/push"
		tenant_id = argument.tenant.value
	}

	external_labels = {
		"scraped_by" = "grafana-agent",
		"cluster"    = argument.cluster.value,
		"namespace"  = argument.namespace.value,
	}
}

// Traces
otelcol.exporter.otlp "docker_compose" {
	client {
		endpoint = argument.traces_endpoint.value

		tls {
			insecure             = true
			insecure_skip_verify = true
		}
	}
}

// Profiles
pyroscope.write "docker_compose" {
	endpoint {
		url = argument.profiles_endpoint.value
	}

	external_labels = {
		"scraped_by" = "grafana-agent",
		"cluster"    = argument.cluster.value,
		"namespace"  = argument.namespace.value,
	}
}

discovery.docker "containers" {
	host = "unix:///var/run/docker.sock"

	filter {
		name   = "status"
		values = ["running"]
	}
}

discovery.relabel "common" {
	targets = discovery.docker.containers.targets

	// filter by service name
	rule {
		action        = "keep"
		source_labels = [
			"__meta_docker_container_label_com_docker_compose_service",
		]
		regex         = "(agent|mimir|mimir-.*|grafana|loki|loki-.*|tempo|tempo-.*|pyroscope|distributor|ingester|query-frontend|querier|query-scheduler|ruler|compactor|store-gateway|alertmanager|overrides-exporter|index-gateway|gateway)"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_docker_container_label_com_docker_compose_service",
		]
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = argument.namespace.value + "/$1"
		target_label = "job"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_docker_container_label_com_docker_compose_service",
		]
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "pod"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_docker_container_label_com_docker_compose_service",
			"__meta_docker_container_label_app",
		]
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "app"
	}

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}
}
