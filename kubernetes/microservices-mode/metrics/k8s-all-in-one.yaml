apiVersion: v1
data:
  LOKI_COMPACTOR_HOST: loki.logging-system.svc.cluster.local
  LOKI_DISTRIBUTOR_HOST: loki.logging-system.svc.cluster.local
  LOKI_INGESTER_HOST: loki.logging-system.svc.cluster.local
  LOKI_QUERIER_HOST: loki.logging-system.svc.cluster.local
  LOKI_QUERY_FRONTEND_HOST: loki.logging-system.svc.cluster.local
  LOKI_RULER_HOST: loki.logging-system.svc.cluster.local
  MIMIR_ALERT_MANAGER_HOST: alertmanager-headless.monitoring-system.svc.cluster.local
  MIMIR_COMPACTOR_HOST: compactor.monitoring-system.svc.cluster.local
  MIMIR_DISTRIBUTOR_HOST: distributor.monitoring-system.svc.cluster.local
  MIMIR_QUERY_FRONTEND_HOST: query-frontend.monitoring-system.svc.cluster.local
  MIMIR_RULER_HOST: ruler.monitoring-system.svc.cluster.local
  PYROSCOPE_DISTRIBUTOR_HOST: pyroscope.profiles-system.svc.cluster.local
  PYROSCOPE_QUERY_FRONTEND_HOST: pyroscope.profiles-system.svc.cluster.local
kind: ConfigMap
metadata:
  name: nginx-env
  namespace: gateway
---
apiVersion: v1
data:
  alertmanager-fallback-config.yaml: |
    route:
      group_wait: 0s
      receiver: empty-receiver

    receivers:
      # In this example we're not going to send any notification out of Alertmanager.
      - name: 'empty-receiver'
  mimir.yaml: |
    # Do not use this configuration in production.
    # It is for demonstration purposes only.
    multitenancy_enabled: false

    # -usage-stats.enabled=false
    usage_stats:
      enabled: false

    server:
      http_listen_port: 8080
      grpc_listen_port: 9095
      log_level: warn

    common:
      storage:
        backend: s3
        s3:
          endpoint:          ${MIMIR_S3_ENDPOINT:minio.minio-system.svc:443}
          access_key_id:     ${MIMIR_S3_ACCESS_KEY_ID:lgtmp}
          secret_access_key: ${MIMIR_S3_SECRET_ACCESS_KEY:supersecret}
          insecure:          ${MIMIR_S3_INSECURE:false}
          http:
            insecure_skip_verify: true

    alertmanager:
      data_dir: /data/alertmanager
      enable_api: true
      external_url: /alertmanager
      fallback_config_file: /etc/mimir/alertmanager-fallback-config.yaml
    alertmanager_storage:
      s3:
        bucket_name: mimir-alertmanager

    blocks_storage:
      s3:
        bucket_name: mimir-blocks
      tsdb:
        dir: /data/ingester

    frontend:
      parallelize_shardable_queries: true
      scheduler_address: query-scheduler-headless:9095
    frontend_worker:
      grpc_client_config:
        max_send_msg_size: 419430400
      scheduler_address: query-scheduler-headless:9095

    memberlist:
      join_members: [ gossip-ring-headless:7946 ]

    ruler:
      rule_path: /data/rules
      enable_api: true
      alertmanager_url: http://alertmanager-headless:8080/alertmanager
    ruler_storage:
      s3:
        bucket_name: mimir-ruler

    runtime_config:
      file: /var/mimir/runtime.yaml

    query_scheduler:
      max_outstanding_requests_per_tenant: 800

    limits:
      native_histograms_ingestion_enabled: true
kind: ConfigMap
metadata:
  name: mimir-config-f7dm4gk45h
  namespace: monitoring-system
---
apiVersion: v1
data:
  ALERT_MANAGER_HOST: alertmanager-headless.default.svc.cluster.local
  COMPACTOR_HOST: compactor.default.svc.cluster.local
  DISTRIBUTOR_HOST: distributor.default.svc.cluster.local
  NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
  QUERY_FRONTEND_HOST: query-frontend.default.svc.cluster.local
  RULER_HOST: ruler.default.svc.cluster.local
kind: ConfigMap
metadata:
  name: nginx-env-72mfd2c4h8
  namespace: monitoring-system
---
apiVersion: v1
data:
  gateway_mimir.conf.template: "server {\n    listen 8080;\n    listen [::]:8080;\n\n
    \   location = / {\n      return 200 'OK';\n      auth_basic off;\n      access_log
    off;\n    }\n\n    proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;\n\n
    \   # Distributor endpoints\n    location /distributor {\n      proxy_pass      http://${DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n    location = /api/v1/push {\n      proxy_pass      http://${DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n    location /otlp/v1/metrics {\n      proxy_pass      http://${DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n\n    # Alertmanager endpoints\n    location /alertmanager {\n      proxy_pass
    \     http://${ALERT_MANAGER_HOST}:8080$request_uri;\n    }\n    location = /multitenant_alertmanager/status
    {\n      proxy_pass      http://${ALERT_MANAGER_HOST}:8080$request_uri;\n    }\n
    \   location = /api/v1/alerts {\n      proxy_pass      http://${ALERT_MANAGER_HOST}:8080$request_uri;\n
    \   }\n\n    # Ruler endpoints\n    location /prometheus/config/v1/rules {\n      proxy_pass
    \     http://${RULER_HOST}:8080$request_uri;\n    }\n    location /prometheus/api/v1/rules
    {\n      proxy_pass      http://${RULER_HOST}:8080$request_uri;\n    }\n    \n
    \   location /prometheus/api/v1/alerts {\n      proxy_pass      http://${RULER_HOST}:8080$request_uri;\n
    \   }\n    location = /ruler/ring {\n      proxy_pass      http://${RULER_HOST}:8080$request_uri;\n
    \   }\n\n    # Rest of /prometheus goes to the query frontend\n    location /prometheus
    {\n      proxy_pass      http://${QUERY_FRONTEND_HOST}:8080$request_uri;\n    }\n\n
    \   # Buildinfo endpoint can go to any component\n    location = /api/v1/status/buildinfo
    {\n      proxy_pass      http://${QUERY_FRONTEND_HOST}:8080$request_uri;\n    }\n\n
    \   # Compactor endpoint for uploading blocks\n    location /api/v1/upload/block/
    {\n      proxy_pass      http://${COMPACTOR_HOST}:8080$request_uri;\n    }\n}"
  nginx.conf.template: |-
    worker_processes  auto;
    error_log  /dev/stderr error;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      client_max_body_size  4M;

      proxy_read_timeout    600; ## 10 minutes
      proxy_send_timeout    600;
      proxy_connect_timeout 600;

      proxy_http_version    1.1;

      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

      map $status $loggable {
        ~^[23]  0;
        default 1;
      }

      access_log   /dev/stderr  main if=$loggable;

      sendfile     on;
      tcp_nopush   on;

      resolver kube-dns.kube-system.svc.cluster.local;

      # Ensure that X-Scope-OrgID is always present, default to the no_auth_tenant for backwards compatibility when multi-tenancy was turned off.
      map $http_x_scope_orgid $ensured_x_scope_orgid {
        default $http_x_scope_orgid;
        "" "anonymous";
      }

      include /etc/nginx/gateway_*.conf;
    }
kind: ConfigMap
metadata:
  name: nginx-templates-h69cm5877t
  namespace: monitoring-system
---
apiVersion: v1
data:
  runtime.yaml: |-
    # https://grafana.com/docs/mimir/latest/configure/about-runtime-configuration/
    ingester_limits: # limits that each ingester replica enforces
      max_ingestion_rate: 20000
      max_series: 1500000
      max_tenants: 1000
      max_inflight_push_requests: 30000

    distributor_limits: # limits that each distributor replica enforces
      max_ingestion_rate: 20000
      max_inflight_push_requests: 30000
      max_inflight_push_requests_bytes: 50000000

    overrides:
      anonymous: # limits for anonymous that the whole cluster enforces
        # ingestion_tenant_shard_size: 9
        max_global_series_per_user: 1500000
        max_global_series_per_metric: 50000
        max_fetched_series_per_query: 100000
        ruler_max_rules_per_rule_group: 100
        ruler_max_rule_groups_per_tenant: 100
kind: ConfigMap
metadata:
  name: runtime-config-88gg5gk88d
  namespace: monitoring-system
---
apiVersion: v1
data:
  CLUSTER: azNkLWszcy1jb2RlbGFi
  METRICS_ENDPOINT: aHR0cDovL25naW54LmdhdGV3YXkuc3ZjLmNsdXN0ZXIubG9jYWw6ODA4MA==
kind: Secret
metadata:
  name: agent-env
  namespace: monitoring-system
type: Opaque
---
apiVersion: v1
data:
  MIMIR_S3_SECRET_ACCESS_KEY: VkQ1MzhPWXhTRWlHRDRJOW1tRmZxRk1DR3ExdklpR20=
kind: Secret
metadata:
  name: mimir-env-92ddctt858
  namespace: monitoring-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: alertmanager
  name: alertmanager
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-am
    port: 9095
  selector:
    app: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: alertmanager
    prometheus.io/service-monitor: "false"
  name: alertmanager-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
  - name: http-web
    port: 9093
  - name: tcp-cluster
    port: 9094
  - name: udp-cluster
    port: 9094
    protocol: UDP
  - name: grpc-am
    port: 9095
  publishNotReadyAddresses: true
  selector:
    app: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: compactor
  name: compactor
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-compactor
    port: 9095
  selector:
    app: compactor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: distributor
  name: distributor
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-distribut
    port: 9095
  selector:
    app: distributor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gossip-ring
    prometheus.io/service-monitor: "false"
  name: gossip-ring-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: tcp-gossip-ring
    port: 7946
    protocol: TCP
    targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    gossip_ring_member: "true"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingester
  name: ingester
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-ingester
    port: 9095
  selector:
    app: ingester
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingester
    prometheus.io/service-monitor: "false"
  name: ingester-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-ingester
    port: 9095
  selector:
    app: ingester
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
  name: minio
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 9000
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: monitoring-system
spec:
  ports:
  - name: http-service
    port: 8080
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: overrides-exporter
  name: overrides-exporter
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-overrides
    port: 9095
  selector:
    app: overrides-exporter
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: querier
  name: querier
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-querier
    port: 9095
  selector:
    app: querier
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-frontend
  name: query-frontend
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-frontend
    port: 9095
  selector:
    app: query-frontend
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-scheduler
  name: query-scheduler
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-scheduler
    port: 9095
  selector:
    app: query-scheduler
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-scheduler
    prometheus.io/service-monitor: "false"
  name: query-scheduler-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-scheduler
    port: 9095
  publishNotReadyAddresses: true
  selector:
    app: query-scheduler
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ruler
  name: ruler
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  selector:
    app: ruler
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: store-gateway
  name: store-gateway
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-store-gw
    port: 9095
  selector:
    app: store-gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: store-gateway
    prometheus.io/service-monitor: "false"
  name: store-gateway-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
  - name: grpc-store-gw
    port: 9095
  selector:
    app: store-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: distributor
  name: distributor
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: distributor
  template:
    metadata:
      labels:
        app: distributor
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=distributor
        - -config.expand-env=true
        - -config.file=/etc/mimir/mimir.yaml
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: distributor
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-distribut
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: minio
  name: minio
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      annotations:
        prometheus.io.path: /minio/v2/metrics/cluster
        prometheus.io.port: "9000"
        prometheus.io.scrape: "false"
      labels:
        app: minio
    spec:
      containers:
      - command:
        - sh
        - -c
        - |
          mkdir -p /data/mimir-blocks /data/mimir-ruler /data/mimir-alertmanager && \
          mkdir -p /data/loki-data /data/loki-ruler && \
          mkdir -p /data/tempo-data  && \
          mkdir -p /data/pyroscope-data && \
          minio server /data --console-address ':9001'
        env:
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: public
        - name: MINIO_ROOT_USER
          value: admin
        - name: MINIO_ROOT_PASSWORD
          value: admin_password
        - name: MINIO_UPDATE
          value: "off"
        image: minio/minio:RELEASE.2023-07-21T21-12-44Z
        imagePullPolicy: IfNotPresent
        name: minio
        ports:
        - containerPort: 9000
          name: http-metrics
        - containerPort: 9001
          name: http-console
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: nginx-env-72mfd2c4h8
        image: nginxinc/nginx-unprivileged:1.25-alpine
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 8080
          name: http-service
        readinessProbe:
          httpGet:
            path: /
            port: http-service
          initialDelaySeconds: 15
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /etc/nginx/templates
          name: templates
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: nginx-templates-h69cm5877t
        name: templates
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: overrides-exporter
  name: overrides-exporter
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: overrides-exporter
  template:
    metadata:
      labels:
        app: overrides-exporter
    spec:
      containers:
      - args:
        - -target=overrides-exporter
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: overrides-exporter
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-overrides
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: querier
  name: querier
  namespace: monitoring-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: querier
  template:
    metadata:
      labels:
        app: querier
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=querier
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: querier
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-querier
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 180
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: query-frontend
  name: query-frontend
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query-frontend
  template:
    metadata:
      labels:
        app: query-frontend
    spec:
      containers:
      - args:
        - -target=query-frontend
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: query-frontend
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-frontend
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 180
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: query-scheduler
  name: query-scheduler
  namespace: monitoring-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: query-scheduler
  template:
    metadata:
      labels:
        app: query-scheduler
    spec:
      containers:
      - args:
        - -target=query-scheduler
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -server.grpc.keepalive.max-connection-age=2562047h
        - -server.grpc.keepalive.max-connection-age-grace=2562047h
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: query-scheduler
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-scheduler
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 180
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ruler
  name: ruler
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ruler
  template:
    metadata:
      labels:
        app: ruler
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=ruler
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: ruler
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-ruler
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
        - mountPath: /rules
          name: rule-path
      terminationGracePeriodSeconds: 180
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
      - emptyDir: {}
        name: rule-path
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: alertmanager
  name: alertmanager
  namespace: monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  serviceName: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=alertmanager
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: alertmanager
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-am
        - containerPort: 9093
          name: http-web
        - containerPort: 9094
          name: tcp-cluster
        - containerPort: 9094
          name: ucp-cluster
          protocol: UDP
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: compactor
  name: compactor
  namespace: monitoring-system
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: compactor
  serviceName: compactor
  template:
    metadata:
      labels:
        app: compactor
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=compactor
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: compactor
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-compactor
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ingester
  name: ingester
  namespace: monitoring-system
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app: ingester
  serviceName: ingester-headless
  template:
    metadata:
      labels:
        app: ingester
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=ingester
        - -config.expand-env=true
        - -config.file=/etc/mimir/mimir.yaml
        - -ingester.ring.instance-availability-zone=zone-default
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: ingester
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 9095
          name: grpc-ingester
        - containerPort: 7946
          name: http-memberlist
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: store-gateway
  name: store-gateway
  namespace: monitoring-system
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: store-gateway
  serviceName: store-gateway-headless
  template:
    metadata:
      labels:
        app: store-gateway
        gossip_ring_member: "true"
    spec:
      containers:
      - args:
        - -target=store-gateway
        - -config.file=/etc/mimir/mimir.yaml
        - -config.expand-env=true
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - secretRef:
            name: mimir-env-92ddctt858
        image: grafana/mimir:2.10.4
        imagePullPolicy: IfNotPresent
        name: store-gateway
        ports:
        - containerPort: 8080
          name: http-metrics
          protocol: TCP
        - containerPort: 9095
          name: grpc-store-gw
          protocol: TCP
        - containerPort: 7946
          name: http-memberlist
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/mimir
          name: mimir-config
        - mountPath: /var/mimir
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - configMap:
          name: mimir-config-f7dm4gk45h
        name: mimir-config
      - configMap:
          name: runtime-config-88gg5gk88d
        name: runtime-config
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: alertmanager
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/alertmanager
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: alertmanager
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: compactor
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/compactor
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: compactor
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: distributor
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/distributor
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: distributor
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ingester
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/ingester
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: ingester
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: minio
  namespace: monitoring-system
spec:
  endpoints:
  - path: /minio/v2/metrics/cluster
    port: http-metrics
    relabelings:
    - replacement: monitoring-system/minio
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: minio
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: overrides-exporter
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/overrides-exporter
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: overrides-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: querier
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/querier
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: querier
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: query-frontend
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/query-frontend
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: query-frontend
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: query-scheduler
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/query-scheduler
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: query-scheduler
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ruler
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/ruler
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: ruler
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: store-gateway
  namespace: monitoring-system
spec:
  endpoints:
  - port: http-metrics
    relabelings:
    - replacement: monitoring-system/store-gateway
      sourceLabels:
      - job
      targetLabel: job
    scheme: http
  namespaceSelector:
    matchNames:
    - monitoring-system
  selector:
    matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
      - "false"
    matchLabels:
      app: store-gateway
