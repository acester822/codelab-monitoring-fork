apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
  namespace: monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
rules:
- apiGroups:
  - ""
  - discovery.k8s.io
  - networking.k8s.io
  resources:
  - endpoints
  - endpointslices
  - ingresses
  - nodes
  - nodes/proxy
  - nodes/metrics
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - monitoring.grafana.com
  resources:
  - podlogs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - monitoring.coreos.com
  resources:
  - prometheusrules
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
- apiGroups:
  - monitoring.coreos.com
  resources:
  - podmonitors
  - servicemonitors
  - probes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: monitoring-system
---
apiVersion: v1
data:
  config.river: "/*\nThe following example shows using the default all logs processing
    module, for\na single tenant and specifying the destination url/credentials via
    environment\nvariables.\n*/\nlogging {\n  level  = coalesce(env(\"AGENT_LOG_LEVEL\"),
    \"info\")\n  format = \"logfmt\"\n}\n\nmodule.file \"lgtmp\" {\n\tfilename = coalesce(env(\"AGENT_CONFIG_FOLDER\"),
    \"/etc/agent-modules\") + \"/lgtmp.river\"\n\n\targuments {\n    cluster           =
    coalesce(env(\"CLUSTER\"), \"k3d-k3s\")\n    metrics_endpoint  = env(\"METRICS_ENDPOINT\")\n
    \   logs_endpoint     = env(\"LOGS_ENDPOINT\")\n    profiles_endpoint = env(\"PROFILES_ENDPOINT\")\n\t}\n}\n\n/********************************************\n
    * Metrics\n ********************************************/\nmodule.file \"metrics_primary\"
    {\n\tfilename = coalesce(env(\"AGENT_CONFIG_FOLDER\"), \"/etc/agent-modules\")
    + \"/metrics.river\"\n\n  arguments {\n    forward_to = [module.file.lgtmp.exports.metrics_receiver]\n
    \   clustering = true\n  }\n}\n\n/********************************************\n
    * Logs\n ********************************************/\nmodule.git \"event_logs\"
    {\n  repository = \"https://github.com/grafana/agent-modules.git\"\n  revision
    \  = \"main\"\n  path       = \"modules/kubernetes/logs/events.river\"\n\n  arguments
    {\n    forward_to = [module.file.lgtmp.exports.logs_receiver]\n    git_pull_freq
    = \"0s\"\n  }\n}\n\n/********************************************\n * Profiles\n
    ********************************************/\nmodule.file \"profiles_primary\"
    {\n\tfilename = coalesce(env(\"AGENT_CONFIG_FOLDER\"), \"/etc/agent-modules\")
    + \"/profiles.river\"\n\n  arguments {\n    forward_to = [module.file.lgtmp.exports.profiles_receiver]\n
    \   clustering = true\n  }\n}\n"
kind: ConfigMap
metadata:
  name: agent-config-24fkcmk5t9
  namespace: monitoring-system
---
apiVersion: v1
data:
  lgtmp.river: "/********************************************\n * ARGUMENTS\n ********************************************/\nargument
    \"cluster\" {\n\toptional = true\n\tdefault  = \"monitoring-system\"\n}\n\nargument
    \"metrics_endpoint\" {\n\toptional = true\n\tdefault  = \"http://mimir:8080\"\n\t//comment
    = \"Where to send collected metrics.\"\n}\n\nargument \"logs_endpoint\" {\n\toptional
    = true\n\tdefault  = \"http://loki:3100\"\n\t//comment = \"Where to send collected
    logs.\"\n}\n\nargument \"traces_endpoint\" {\n\toptional = true\n\tdefault  =
    \"tempo:4317\"\n\t//comment = \"Where to send collected traces.\"\n}\n\nargument
    \"profiles_endpoint\" {\n\toptional = true\n\tdefault  = \"http://pyroscope:4040\"\n\t//comment
    \ = \"Where to send collected profiles.\"\n}\n\n/********************************************\n
    * EXPORTS\n ********************************************/\n\nexport \"metrics_receiver\"
    {\n\tvalue = prometheus.remote_write.mimir.receiver\n}\n\nexport \"logs_receiver\"
    {\n\tvalue = loki.write.loki.receiver\n}\n\nexport \"traces_receiver\" {\n\tvalue
    = otelcol.exporter.otlp.tempo.input\n}\n\nexport \"profiles_receiver\" {\n\tvalue
    = pyroscope.write.pyroscope.receiver\n}\n\n/********************************************\n
    * Endpoints\n ********************************************/\n\n// Metrics\nprometheus.remote_write
    \"mimir\" {\n\tendpoint {\n\t\turl = argument.metrics_endpoint.value + \"/api/v1/push\"\n\t}\n\n\texternal_labels
    = {\n\t\t\"scraped_by\" = \"grafana-agent\",\n\t\t\"cluster\" \t = argument.cluster.value,\n\t}\n}\n\n//
    Logs\nloki.write \"loki\" {\n\tendpoint {\n\t\turl = argument.logs_endpoint.value
    + \"/loki/api/v1/push\"\n\t}\n\n\texternal_labels = {\n\t\t\"scraped_by\" = \"grafana-agent\",\n\t\t\"cluster\"
    \t = argument.cluster.value,\n\t}\n}\n\n// Traces\notelcol.exporter.otlp \"tempo\"
    {\n\tclient {\n\t\tendpoint = argument.traces_endpoint.value\n\n\t\ttls {\n\t\t\tinsecure
    \            = true\n\t\t\tinsecure_skip_verify = true\n\t\t}\n\t}\n}\n\n// Profiles\npyroscope.write
    \"pyroscope\" {\n\tendpoint {\n\t\turl = argument.profiles_endpoint.value\n\t}\n\n\texternal_labels
    = {\n\t\t\"scraped_by\" = \"grafana-agent\",\n\t\t\"cluster\" \t = argument.cluster.value,\n\t}\n}\n"
  logs.river: "/*\nModule: logs\nDescription: Wrapper module to include all kubernetes
    logging modules and use cri parsing\n*/\nargument \"forward_to\" {\n  // comment
    = \"Must be a list(LogsReceiver) where collected logs should be forwarded to\"\n\toptional
    = false\n}\n\nargument \"tenant\" {\n  // comment = \"The tenant to filter logs
    to.  This does not have to be the tenantId, this is the value to look for in the
    logs.agent.grafana.com/tenant annotation, and this can be a regex.\"\n  optional
    = true\n  default = \".*\"\n}\n\nargument \"keep_labels\" {\n  // comment = \"List
    of labels to keep before the log message is written to Loki\"\n  optional = true\n
    \ default = [\n    \"app\",\n    \"cluster\",\n    \"component\",\n    \"container\",\n
    \   \"deployment\",\n    \"env\",\n    \"filename\",\n    \"instance\",\n    \"job\",\n
    \   \"level\",\n    \"log_type\",\n    \"namespace\",\n    \"region\",\n    \"service\",\n
    \   \"squad\",\n    \"team\",\n  ]\n}\n\nargument \"git_repo\" {\n  optional =
    true\n  default = coalesce(env(\"GIT_REPO\"), \"https://github.com/grafana/agent-modules.git\")\n}\n\nargument
    \"git_rev\" {\n  optional = true\n  default = coalesce(env(\"GIT_REV\"), env(\"GIT_REVISION\"),
    env(\"GIT_BRANCH\"), \"main\")\n}\n\nargument \"git_pull_freq\" {\n  // comment
    = \"How often to pull the git repo, the default is 0s which means never pull\"\n
    \ optional = true\n  default = \"0s\"\n}\n\nmodule.git \"log_targets\" {\n  repository
    = argument.git_repo.value\n  revision = argument.git_rev.value\n  pull_frequency
    = argument.git_pull_freq.value\n  path = \"modules/kubernetes/logs/targets/logs-from-worker.river\"\n\n
    \ arguments {\n    forward_to = [module.git.log_formats_all.exports.process.receiver]\n
    \   tenant = argument.tenant.value\n    git_repo = argument.git_repo.value\n    git_rev
    = argument.git_rev.value\n    git_pull_freq = argument.git_pull_freq.value\n  }\n}\n\nmodule.git
    \"log_formats_all\" {\n  repository = argument.git_repo.value\n  revision = argument.git_rev.value\n
    \ pull_frequency = argument.git_pull_freq.value\n  path = \"modules/kubernetes/logs/log-formats/all.river\"\n\n
    \ arguments {\n    forward_to = [module.git.log_level_default.exports.process.receiver]\n
    \   git_repo = argument.git_repo.value\n    git_rev = argument.git_rev.value\n
    \   git_pull_freq = argument.git_pull_freq.value\n  }\n}\n\nmodule.git \"log_level_default\"
    {\n  repository = argument.git_repo.value\n  revision = argument.git_rev.value\n
    \ pull_frequency = argument.git_pull_freq.value\n  path = \"modules/kubernetes/logs/labels/log-level.river\"\n\n
    \ arguments {\n    forward_to = [module.git.drop_levels.exports.process.receiver]\n
    \ }\n}\n\nmodule.git \"drop_levels\" {\n  repository = argument.git_repo.value\n
    \ revision = argument.git_rev.value\n  pull_frequency = argument.git_pull_freq.value\n
    \ path = \"modules/kubernetes/logs/drops/levels.river\"\n\n  arguments {\n    forward_to
    = [module.git.scrub_all.exports.process.receiver]\n    git_repo = argument.git_repo.value\n
    \   git_rev = argument.git_rev.value\n    git_pull_freq = argument.git_pull_freq.value\n
    \ }\n}\n\nmodule.git \"scrub_all\" {\n  repository = argument.git_repo.value\n
    \ revision = argument.git_rev.value\n  pull_frequency = argument.git_pull_freq.value\n
    \ path = \"modules/kubernetes/logs/scrubs/all.river\"\n\n  arguments {\n    forward_to
    = [module.git.embed_pod.exports.process.receiver]\n    git_repo = argument.git_repo.value\n
    \   git_rev = argument.git_rev.value\n    git_pull_freq = argument.git_pull_freq.value\n
    \ }\n}\n\nmodule.git \"embed_pod\" {\n  repository = argument.git_repo.value\n
    \ revision = argument.git_rev.value\n  pull_frequency = argument.git_pull_freq.value\n
    \ path = \"modules/kubernetes/logs/embed/pod.river\"\n\n  arguments {\n    forward_to
    = [module.git.mask_all.exports.process.receiver]\n  }\n}\n\nmodule.git \"mask_all\"
    {\n  repository = argument.git_repo.value\n  revision = argument.git_rev.value\n
    \ pull_frequency = argument.git_pull_freq.value\n  path = \"modules/kubernetes/logs/masks/all.river\"\n\n
    \ arguments {\n    forward_to = [module.git.label_normalize_filename.exports.process.receiver]\n
    \   git_repo = argument.git_repo.value\n    git_rev = argument.git_rev.value\n
    \   git_pull_freq = argument.git_pull_freq.value\n  }\n}\n\nmodule.git \"label_normalize_filename\"
    {\n  repository = argument.git_repo.value\n  revision = argument.git_rev.value\n
    \ pull_frequency = argument.git_pull_freq.value\n  path = \"modules/kubernetes/logs/labels/normalize-filename.river\"\n\n
    \ arguments {\n    forward_to = [module.git.label_keep.exports.process.receiver]\n
    \ }\n}\n\nmodule.git \"label_keep\" {\n  repository = argument.git_repo.value\n
    \ revision = argument.git_rev.value\n  pull_frequency = argument.git_pull_freq.value\n
    \ path = \"modules/kubernetes/logs/labels/keep-labels.river\"\n\n  arguments {\n
    \   forward_to = argument.forward_to.value\n    keep_labels = argument.keep_labels.value\n
    \ }\n}\n"
  metrics.river: "/*\nModule: metrics-all\nDescription: Wrapper module to include
    all kubernetes metric modules and use cri parsing\n*/\nargument \"forward_to\"
    {\n  // comment = \"Must be a list(MetricssReceiver) where collected logs should
    be forwarded to\"\n\toptional = false\n}\n\nargument \"clustering\" {\n  // comment
    = \"Whether or not clustering should be enabled\"\n  optional = true\n  default
    = false\n}\n\n/********************************************\n * Kubernetes Auto
    Scrape ServiceMonitor\n ********************************************/\nprometheus.operator.servicemonitors
    \"auto_scrape_servicemonitors\" {\n  forward_to = argument.forward_to.value\n
    \ \n  clustering {\n    enabled = argument.clustering.value\n  }\n}\n\n\n/********************************************\n
    * Kubernetes Auto Scrape PodMonitors\n ********************************************/\nprometheus.operator.podmonitors
    \"auto_scrape_podmonitors\" {\n  forward_to = argument.forward_to.value\n    \n
    \ clustering {\n    enabled = argument.clustering.value\n  }\n  \n  selector {\n
    \     match_expression {\n          key = \"team\"\n          operator = \"In\"\n
    \         values = [\"team-infra\"]\n      }\n  }\n}\n\n/********************************************\n
    * Kubernetes Prometheus Rules To Mimir\n ********************************************/\nmimir.rules.kubernetes
    \"prometheus_rules_to_mimir\" {\n    address = coalesce(env(\"METRICS_ENDPOINT\"),
    \"http://nginx.monitoring-system:8080\")\n    tenant_id = \"anonymous\"\n}"
  profiles.river: "/*\nModule: profiles\nDescription: Wrapper module to include all
    kubernetes profile modules and use cri parsing\n*/\nargument \"forward_to\" {\n
    \ // comment = \"Must be a list(ProfilessReceiver) where collected logs should
    be forwarded to\"\n\toptional = false\n}\n\nargument \"clustering\" {\n  // comment
    = \"Whether or not clustering should be enabled\"\n  optional = true\n  default
    = false\n}\n\n\ndiscovery.kubernetes \"pyroscope_kubernetes\" {\n\trole = \"pod\"\n}\n\n//
    The default scrape config allows to define annotations based scraping.\n//\n//
    For example the following annotations:\n//\n// ```\n// profiles.grafana.com/memory.scrape:
    \"true\"\n// profiles.grafana.com/memory.port: \"8080\"\n// profiles.grafana.com/cpu.scrape:
    \"true\"\n// profiles.grafana.com/cpu.port: \"8080\"\n// profiles.grafana.com/goroutine.scrape:
    \"true\"\n// profiles.grafana.com/goroutine.port: \"8080\"\n// ```\n//\n// will
    scrape the `memory`, `cpu` and `goroutine` profiles from the `8080` port of the
    pod.\n//\n// For more information see https://grafana.com/docs/phlare/latest/operators-guide/deploy-kubernetes/#optional-scrape-your-own-workloads-profiles\ndiscovery.relabel
    \"kubernetes_pods\" {\n\ttargets = concat(discovery.kubernetes.pyroscope_kubernetes.targets)\n\n\trule
    {\n\t\taction        = \"drop\"\n\t\tsource_labels = [\"__meta_kubernetes_pod_phase\"]\n\t\tregex
    \        = \"Pending|Succeeded|Failed|Completed\"\n\t}\n\n\trule {\n\t\taction
    = \"labelmap\"\n\t\tregex  = \"__meta_kubernetes_pod_label_(.+)\"\n\t}\n\n\trule
    {\n\t\taction        = \"replace\"\n\t\tsource_labels = [\"__meta_kubernetes_namespace\"]\n\t\ttarget_label
    \ = \"namespace\"\n\t}\n\n\trule {\n\t\taction        = \"replace\"\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_name\"]\n\t\ttarget_label  = \"pod\"\n\t}\n\n\trule
    {\n\t\taction        = \"replace\"\n\t\tsource_labels = [\"__meta_kubernetes_pod_container_name\"]\n\t\ttarget_label
    \ = \"container\"\n\t}\n}\n\ndiscovery.relabel \"kubernetes_pods_memory_default_name\"
    {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_memory_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape Memory\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_memory\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_memory_default_name.output, discovery.relabel.kubernetes_pods_memory_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = true\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = false\n\t\t}\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_cpu_default_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_cpu_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape CPU\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_cpu\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_cpu_default_name.output, discovery.relabel.kubernetes_pods_cpu_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = false\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = true\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = false\n\t\t}\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_goroutine_default_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_goroutine_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape Goroutine\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_goroutine\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_goroutine_default_name.output,
    discovery.relabel.kubernetes_pods_goroutine_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = false\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = true\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = false\n\t\t}\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_block_default_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_block_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape Block\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_block\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_block_default_name.output, discovery.relabel.kubernetes_pods_block_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = false\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = true\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = false\n\t\t}\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_mutex_default_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_mutex_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape Mutex\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_mutex\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_mutex_default_name.output, discovery.relabel.kubernetes_pods_mutex_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = false\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = true\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = false\n\t\t}\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_fgprof_default_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\ndiscovery.relabel
    \"kubernetes_pods_fgprof_custom_name\" {\n\ttargets = concat(discovery.relabel.kubernetes_pods.output)\n\n\trule
    {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape\"]\n\t\taction
    \       = \"keep\"\n\t\tregex         = \"true\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name\"]\n\t\taction
    \       = \"drop\"\n\t\tregex         = \"\"\n\t}\n\n\trule {\n\t\tsource_labels
    = [\"__meta_kubernetes_pod_container_port_name\"]\n\t\ttarget_label  = \"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name\"\n\t\taction
    \       = \"keepequal\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(https?)\"\n\t\ttarget_label  = \"__scheme__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+)\"\n\t\ttarget_label  = \"__profile_path__\"\n\t\treplacement
    \  = \"$1\"\n\t}\n\n\trule {\n\t\tsource_labels = [\"__address__\", \"__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port\"]\n\t\taction
    \       = \"replace\"\n\t\tregex         = \"(.+?)(?::\\\\d+)?;(\\\\d+)\"\n\t\ttarget_label
    \ = \"__address__\"\n\t\treplacement   = \"$1:$2\"\n\t}\n}\n\n/********************************************\n
    * Kubernetes Pyroscope Scrape Fgprof\n ********************************************/\npyroscope.scrape
    \"pyroscope_scrape_fgprof\" {\n\tclustering {\n\t\tenabled = argument.clustering.value\n\t}\n\n\ttargets
    \   = concat(discovery.relabel.kubernetes_pods_fgprof_default_name.output, discovery.relabel.kubernetes_pods_fgprof_custom_name.output)\n\tforward_to
    = argument.forward_to.value\n\n\tprofiling_config {\n\t\tprofile.memory {\n\t\t\tenabled
    = false\n\t\t}\n\n\t\tprofile.process_cpu {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.goroutine
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.block {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.mutex
    {\n\t\t\tenabled = false\n\t\t}\n\n\t\tprofile.fgprof {\n\t\t\tenabled = true\n\t\t}\n\t}\n}\n"
kind: ConfigMap
metadata:
  name: agent-modules-mk2gb66f59
  namespace: monitoring-system
---
apiVersion: v1
data:
  AGENT_CONFIG_FOLDER: L2V0Yy9hZ2VudC1tb2R1bGVz
  AGENT_LOG_LEVEL: aW5mbw==
  CLUSTER: azNkLWszcy1jb2RlbGFi
  LOGS_ENDPOINT: |
    aHR0cDovL2xva2ktZ2F0ZXdheS5sb2dnaW5nLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbD
    o4MA==
  METRICS_ENDPOINT: aHR0cDovL25naW54Lm1vbml0b3Jpbmctc3lzdGVtOjgwODA=
  PROFILES_ENDPOINT: aHR0cDovL3B5cm9zY29wZS5wcm9maWxlcy1zeXN0ZW06NDA0MA==
kind: Secret
metadata:
  name: agent-env-kcbbb2cb7f
  namespace: monitoring-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
  namespace: monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/name: grafana-agent
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent-cluster
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/name: grafana-agent
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
  namespace: monitoring-system
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana-agent
      app.kubernetes.io/name: grafana-agent
  template:
    metadata:
      annotations:
        logs.agent.grafana.com/scrape: "true"
        logs.agent.grafana.com/scrub-level: debug
        profiles.grafana.com/cpu.port_name: http-metrics
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http-metrics
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http-metrics
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/instance: grafana-agent
        app.kubernetes.io/name: grafana-agent
    spec:
      containers:
      - args:
        - run
        - /etc/agent/config.river
        - --storage.path=/tmp/agent
        - --server.http.listen-addr=0.0.0.0:80
        - --server.http.ui-path-prefix=/
        - --disable-reporting
        - --cluster.enabled=true
        - --cluster.join-addresses=grafana-agent-cluster
        env:
        - name: AGENT_MODE
          value: flow
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
            name: agent-env-kcbbb2cb7f
        image: docker.io/grafana/agent:v0.37.4
        imagePullPolicy: IfNotPresent
        name: grafana-agent
        ports:
        - containerPort: 80
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 80
          initialDelaySeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /etc/agent
          name: config
        - mountPath: /var/log
          name: varlog
          readOnly: true
        - mountPath: /etc/agent-modules
          name: agent-modules
      - args:
        - --volume-dir=/etc/agent
        - --webhook-url=http://localhost:80/-/reload
        image: docker.io/jimmidyson/configmap-reload:v0.8.0
        name: config-reloader
        resources:
          requests:
            cpu: 1m
            memory: 5Mi
        volumeMounts:
        - mountPath: /etc/agent
          name: config
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: grafana-agent
      volumes:
      - configMap:
          name: agent-config-24fkcmk5t9
        name: config
      - hostPath:
          path: /var/log
        name: varlog
      - configMap:
          name: agent-modules-mk2gb66f59
        name: agent-modules
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
  namespace: monitoring-system
spec:
  endpoints:
  - honorLabels: true
    port: http-metrics
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana-agent
      app.kubernetes.io/name: grafana-agent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: grafana-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/version: v0.37.4
    helm.sh/chart: grafana-agent-0.27.2
  name: grafana-agent
  namespace: monitoring-system
spec:
  rules:
  - host: grafana-agent.localhost
    http:
      paths:
      - backend:
          service:
            name: grafana-agent
            port:
              number: 80
        path: /
        pathType: Prefix
