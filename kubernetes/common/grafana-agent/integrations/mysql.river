/*
Module: Mysql integrations
Description: Wrapper module to integration mysql metrics
*/
argument "clustering" {
	// comment = "Whether or not clustering should be enabled"
	optional = true
	default  = true
}

argument "name" {
	// comment = "Name of the secret for MySQL"
	optional = true
	default  = "integrations-mysql"
}

argument "namespace" {
	// comment = "Namespace of the MySQL secret Integrations"
	optional = true
	default  = "default"
}

argument "instance" {
	// comment  = "Instance of the Database"
	optional = true
	default  = "primary"
}

argument "forward_to" { }

remote.kubernetes.secret "mysql" {
	name      = argument.name.value
	namespace = argument.namespace.value
}

// Metrics
prometheus.exporter.mysql "integrations_mysql" {
	data_source_name = nonsensitive(remote.kubernetes.secret.mysql.data["mysql-username"]) + ":" + nonsensitive(remote.kubernetes.secret.mysql.data["mysql-password"]) + "@(" + nonsensitive(remote.kubernetes.secret.mysql.data["mysql-host"]) + ")/"
}

prometheus.scrape "mysql" {
	clustering {
		enabled = argument.clustering.value
	}
	enable_protobuf_negotiation = true
	scrape_classic_histograms   = true

	targets = concat(
		prometheus.exporter.mysql.integrations_mysql.targets,
	)
	job_name   = "integrations/mysql"
	forward_to = [prometheus.relabel.integrations_mysql.receiver]
}

prometheus.relabel "integrations_mysql" {
	rule {
		replacement  = argument.instance.value
		target_label = "instance"
	}
	forward_to = argument.forward_to.value
}
